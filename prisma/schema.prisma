generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/smartschedule/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String
  firstName     String?
  lastName      String?
  role          String     @default("student") // "admin" or "student"
  groupId       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  group         Group?     @relation(fields: [groupId], references: [id])
  userGroups    UserGroup[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  semester    String?     // "1 семестр", "2 семестр", etc.
  year        String?     // "2025-27"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
  schedules   Schedule[]
  userGroups  UserGroup[]

  @@map("groups")
}

model Subject {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  instructor  String?    // Преподаватель
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[]

  @@map("subjects")
}

model Schedule {
  id          String    @id @default(cuid())
  subjectId   String
  groupId     String?
  subgroupId  String?   // Подгруппа 1, 2, 3, 4
  date        DateTime  // Дата занятия
  dayOfWeek   Int       // 1-7 (понедельник-воскресенье)
  startTime   String    // "11:00"
  endTime     String    // "17:00"
  location    String?   // Аудитория или ссылка zoom
  eventType   String?   // "lecture", "seminar", "tutorial", "exam", etc.
  description String?   // Дополнительная информация
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  group       Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model UserGroup {
  id                      String  @id @default(cuid())
  userId                  String
  groupId                 String
  subgroupCommerce        Int?    // Подгруппа для коммерциализации
  subgroupTutorial        Int?    // Подгруппа для тьюториала
  subgroupFinance         Int?    // Подгруппа для финансового моделирования
  subgroupSystemThinking  Int?    // Подгруппа для системного мышления
  createdAt               DateTime @default(now())
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group                   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}
